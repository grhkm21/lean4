import Mathlib.Analysis.SpecialFunctions.Integrals
import Mathlib.Analysis.SpecialFunctions.Log.Basic
import Mathlib.Data.List.Basic
import Mathlib.Data.Nat.Totient
import Mathlib.Data.Real.Basic
import Mathlib.NumberTheory.ArithmeticFunction
import Mathlib.NumberTheory.ModularForms.Basic
import Mathlib.Order.Partition.Finpartition
import Mathlib.SetTheory.Cardinal.SchroederBernstein
import Mathlib.Tactic

section NT1

open Nat BigOperators Finset Real ArithmeticFunction

/-
lemma moebius_rec_sum {N : ‚Ñï} (hN : N ‚â† 0) :
  ‚àë (x : ‚Ñï) in N.divisors, (Œº x : ‚Ñù) / x = ‚àè p in filter nat.prime N.divisors, (1 - p‚Åª¬π) :=
-/

/-
  Proof outline is that ‚àë_{x | N} Œº x / x = (Œª x, Œº x / x) * Œ∂
  Where * is the Dirichlet convolution, which is multiplicative.
  We then prove the theorem for primes, for which it's easy.
-/

-- My attempt
example {n : ‚Ñï} (hn: 0 < n) : (œÜ n : ‚Ñö) / n = ‚àè p in filter Nat.Prime n.divisors, (1 - (p : ‚Ñö)‚Åª¬π) :=
by
  revert hn
  rw [‚Üêprime_divisors_eq_to_filter_divisors_prime]
  refine recOnPosPrimePosCoprime ?_ ?_ ?_ ?_ n
  ¬∑ intro p k hp hk _
    have hp' : (p : ‚Ñö) ‚â† 0 := by exact_mod_cast hp.ne_zero
    have hpk' : (p^k : ‚Ñö) ‚â† 0 := by exact_mod_cast (pow_eq_zero_iff hk).not.mpr hp.ne_zero
    -- "math part"
    rw [hp.factors_pow, List.toFinset_replicate_of_ne_zero (Nat.ne_of_gt hk), prod_singleton,
    totient_prime_pow hp hk, div_eq_iff hpk']
    -- "lean part"
    rw [cast_mul, cast_sub (by linarith [hp.two_le]), mul_sub, cast_one, mul_one, ‚Üêcast_mul]
    conv => lhs; lhs; rhs; rhs; rw [‚Üêpow_one p]
    rw [‚Üêpow_add, Nat.sub_add_cancel hk, sub_mul, one_mul, sub_right_inj, mul_comm, inv_eq_one_div,
    ‚Üêmul_div_assoc, mul_one]
    apply Eq.symm
    rw [div_eq_iff hp']
    conv => rhs; rhs; rhs; rw [‚Üêpow_one p]
    norm_cast
    rw [‚Üêpow_add, Nat.sub_add_cancel hk]
  ¬∑ simp
  ¬∑ simp
  ¬∑ intro m n hm hn hmn Pm Pn _
    specialize Pm (zero_lt_one.trans hm)
    specialize Pn (zero_lt_one.trans hn)
    rw [Nat.factors_mul_toFinset_of_coprime hmn, prod_union, ‚Üê Pm, ‚Üê Pn, totient_mul hmn]
    field_simp
    rw [List.disjoint_toFinset_iff_disjoint]
    exact Nat.coprime_factors_disjoint hmn

-- ericrbg
example {p k : ‚Ñï} (hp : Nat.Prime p) (hk : 0 < k) :
  ‚Üë(œÜ (p ^ k)) / ‚Üë(p ^ k) = ‚àè p in filter Nat.Prime (p ^ k).divisors, (1 - (p : ‚Ñö)‚Åª¬π) :=
by
  have hp' : (p : ‚Ñö) ‚â† 0 := by exact_mod_cast hp.ne_zero
  have hpk' : (p^k : ‚Ñö) ‚â† 0 := by exact_mod_cast (pow_eq_zero_iff hk).not.mpr hp.ne_zero
  have := one_le_two.trans hp.two_le
  rw [‚Üê prime_divisors_eq_to_filter_divisors_prime, hp.factors_pow,
  List.toFinset_replicate_of_ne_zero hk.ne', prod_singleton, totient_prime_pow hp hk]
  rw [mul_tsub, cast_sub <| mul_le_mul_left _ this, ‚Üê_root_.pow_succ',
      tsub_add_cancel_of_le <| succ_le.mpr hk, sub_div, div_self hpk']
  rw [mul_one, cast_pow, cast_pow, sub_right_inj, ‚Üêmul_eq_one_iff_eq_inv‚ÇÄ hp']
  rw [mul_comm, mul_div, ‚Üê_root_.pow_succ, tsub_add_cancel_of_le <| succ_le.mpr hk, div_self]
  exact pow_ne_zero _ hp'

lemma moebius_rec_sum {N : ‚Ñï} (hN : N ‚â† 0) :
  ‚àë x in N.divisors, (Œº x : ‚Ñù) / x = ‚àè p in filter Nat.Prime N.divisors, (1 - (p : ‚Ñù)‚Åª¬π) :=
by
  let f' : ArithmeticFunction ‚Ñù := ‚ü®fun x => (Œº x : ‚Ñù) / x, by simp‚ü©
  have hf': f'.IsMultiplicative := by sorry
  let f : ArithmeticFunction ‚Ñù := f' * Œ∂
  have hf : f.IsMultiplicative := by sorry
  -- Rewrite LHS using f'
  change ‚àë x in N.divisors, f' x = _
  rw [‚Üêcoe_mul_zeta_apply]
  change f N = _
  -- Manipulate RHS
  rw [‚Üêprime_divisors_eq_to_filter_divisors_prime]
  -- Now we have (multiplicative function) N = _
  -- We separate this into prime powers and prove each
  revert hN
  refine recOnPosPrimePosCoprime ?_ ?_ ?_ ?_ N
  ¬∑ sorry
  ¬∑ intro _; contradiction
  ¬∑ intro _; rw [hf.left]; rfl
  ¬∑ intro m n hm hn hmn Pm Pn _
    specialize Pm (by linarith)
    specialize Pn (by linarith)
    rw [hf.right hmn, factors_mul_toFinset_of_coprime hmn, prod_union _, Pm, Pn]
    exact factorization_disjoint_of_coprime hmn

end NT1

-----------------------------

section NT2

open Nat Real Asymptotics Filter BigOperators Set Finset

set_option pp.rawOnError true

-- This is to fix a bug in v4.2.0-rc1
local macro_rules | `($x ^ $y) => `(HPow.hPow $x $y)

example {x : ‚Ñù} : x ^ 2 - x = x * (x - 1) := by
  rw [mul_sub, ‚Üêpow_two, mul_one]

-- Proving x = O(x^2), meaning that *eventually* x <= cx^2 (c = 1 works)
example : (fun x : ‚Ñù => x) =O[atTop] (fun x => x ^ 2) := by
  have : ‚àÄ x : ‚Ñù, 1 ‚â§ x ‚Üí x ‚â§ x ^ 2 := by
    intro x hx
    rw [‚Üêsub_nonneg, show x ^ 2 - x = x * (x - 1) by rw [mul_sub, ‚Üêpow_two, mul_one]]
    refine mul_nonneg (by linarith) (by linarith)
  apply IsBigO.of_bound'
  rw [eventually_atTop]
  use 1
  intro b hb
  simp_rw [norm_of_nonneg (sq_nonneg _), norm_of_nonneg (zero_le_one.trans hb), this b hb]

noncomputable
def summatory (a : ‚Ñï ‚Üí M) (k : ‚Ñï) (x : ‚Ñù) [AddCommMonoid M] : M := ‚àë n in Icc k ‚åäx‚åã‚Çä, a n

-- partial summation (Theorem 1.3.1, modified)
/- theorem partial_summation {ùïú : Type*} [IsROrC ùïú] (c : ‚Ñï ‚Üí ùïú) (f f' : ‚Ñù ‚Üí ùïú) (n‚ÇÄ : ‚Ñï) (X : ‚Ñù) -/
/-   (hf : ‚àÄ x ‚àà Ici (n‚ÇÄ : ‚Ñù), HasDerivAt f (f' x) x) -/
/-   (hf' : ContinuousOn f' (Ici ‚Üën‚ÇÄ)) : -/
/-   -- Why doesn't this require the integrated function (e.g. f') to be integrable? -/
/-   summatory (fun n => c n * f n) n‚ÇÄ X = -/
/-     (summatory c n‚ÇÄ X) * f X - ‚à´ t in Icc ‚Üën‚ÇÄ X, (summatory c n‚ÇÄ t) * f' t := -/
/- by -/
/-   sorry -/
/-  -/
/- lemma sum_one (X : ‚Ñù) : summatory (fun _ => 1 : ‚Ñï ‚Üí ‚Ñù) 1 X = ‚åäX‚åã‚Çä := by -/
/-   rw [summatory, sum_const, card_Icc, Nat.add_sub_cancel, nsmul_eq_mul, mul_one] -/
/-  -/
/- lemma sum_log (X : ‚Ñù) : -/
/-   summatory (fun x => Real.log x) 1 X = ‚åäX‚åã‚Çä * log X - ‚à´ t in Icc 1 X, ‚åät‚åã‚Çä / t := -/
/- by -/
/-   set c : ‚Ñï ‚Üí ‚Ñù := fun x => 1 with hc -/
/-   let f : ‚Ñù ‚Üí ‚Ñù := fun x => log x -/
/-   let f' : ‚Ñù ‚Üí ‚Ñù := fun x => 1 / x -/
/-   have hf : ‚àÄ x ‚àà Ici (1 : ‚Ñù), HasDerivAt f (f' x) x := sorry -/
/-   have hf' : ContinuousOn f' (Ici 1) := sorry -/
/-   have hs := @partial_summation _ _ c f f' 1 X (by exact_mod_cast hf) (by exact_mod_cast hf') -/
/-   simp_rw [show (fun n => c n * f ‚Üën) = (fun n : ‚Ñï => f ‚Üën) by simp, cast_one, sum_one] at hs -/
/-   conv => rhs ; rhs ; rhs ; ext; rw [div_eq_mul_one_div] -/
/-   exact hs -/

/- example : True := by -/
/-   let f : ‚Ñï ‚Üí ‚Ñï := fun x => x -/
/-   let g : (‚Ñï ‚Üí ‚Ñï) ‚Üí (‚Ñï ‚Üí ‚Ñï) := fun y => (fun x => Nat.floor ((cos (sin ‚Üëx)) ^ 2 / 5)) -- complicated things -/
/-   have h : g (fun x => 2 * f x) = g (fun x => x * 2) + g (fun _ => 0) := by -/
/-     dsimp only -/

/-
-- Proposition 1.3.2
lemma sum_log_asymptotic : (fun X => (summatory (fun x => Real.log x) 1 X - (X * log X - X))) =O[atTop] log := by
  let c : ‚Ñï ‚Üí ùïú := fun n => if n = 0 then 0 else 1
  have hc : ‚àÄ j < 1, c j = 0 := by intro j ; by_cases j = 0 <;> simp [*]
  have hf : ‚àÄ x ‚àà Icc 1 X, HasDerivAt f 
  /- have hf : ‚àÄ x ‚àà Icc ‚Üë1 -/

-- log n!
theorem log_factorial_asymptotic :
  (fun x : ‚Ñù => (‚àë k in Icc 1 ‚åäx‚åã‚Çä, log (k : ‚Ñù)) - (x * log x - x)) =O[atTop] log :=
by
  sorry

-- Stating that sum(log p / p, p ‚â§ n) = log n + O(1)
theorem one_four_three :
  (fun x : ‚Ñù => ‚àë p in (Finset.Icc 1 ‚åäx‚åã‚Çä).filter Nat.Prime, log (p : ‚Ñù) / p - log x) =O[atTop] (fun _ => (1 : ‚Ñù)) :=
by
  sorry
-/

end NT2

-----------------------

section RD

open Set Function List Embedding

variable {Œ± : Type*} [Finite Œ±]

theorem injective_map_thing {s t : List ‚Ñ§} (f : ‚Ñ§ ‚Üí Œ±) (hf : Injective f) :
  (map f s = map f t) ‚Üî (s = t) := (map_injective_iff.mpr hf).eq_iff

variable {f g}
#check @schroeder_bernstein _ _ f g

#check surjOn_iff_exists_map_subtype

theorem special_case {f : Œ± ‚Üí Œ≤} {s : Set Œ±} {t : Set Œ≤}
  (h : ‚àÉ g : s ‚Üí t, Surjective g ‚àß ‚àÄ x : s, f x = g x) :
    SurjOn f s t :=
by
  apply surjOn_iff_exists_map_subtype.mpr
  let ‚ü®g, hg‚ü© := h
  use t
  use g

example {k : ‚Ñï} : ‚àÉ n : ‚Ñï, ‚àÉ f : List Œ± ‚Üí List (Fin n),
  BijOn f {l : List Œ± | l.length = k} {l : List (Fin n) | l.length = k} :=
by
  let ‚ü®n, hŒ±‚ü© := Finite.exists_equiv_fin Œ±
  use n
  let f : Œ± ‚âÉ Fin n := Classical.choice hŒ±
  use List.map f
  have := f.bijective
  refine ‚ü®?_, ?_, ?_‚ü©
  ¬∑ intro x hx
    rw [mem_setOf_eq, length_map, cast mem_setOf_eq hx]
  ¬∑ intro x hx y hy hxy
    exact map_injective_iff.mpr (f.injective) hxy
  ¬∑ apply special_case
    

example {n : ‚Ñï} : {l : List Œ± | l.length ‚â§ n}.Finite := by
  let Sk (k : Fin n) : Set (List Œ±) := {l : List Œ± | l.length = k}
  have h1 : {l : List Œ± | l.length ‚â§ n} = ‚ãÉ (k : Fin n), Sk k := by sorry
  have h2 : ‚àÄ k, (Sk k).Finite := by
    intro k
    dsimp
    done
  rw [h1]
  exact Set.finite_iUnion h2

end RD
