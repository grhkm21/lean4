import Mathlib.Analysis.SpecialFunctions.Trigonometric.EulerSineProd
import Mathlib.Analysis.Complex.UpperHalfPlane.Basic
import Lean4.Continuity

/- I want to try to prove Fourier expansion of Eisenstein series,
  following Diamond & Shurmand p.5 -/

open scoped Real Complex Finset UpperHalfPlane
open Filter Complex Topology BigOperators Finset

#check œÄ

theorem asdf (z : ‚ÑÇ) :
    Tendsto (fun n ‚Ü¶ œÄ * z * ‚àè j in Finset.range n, (1 - z ^ 2 / (j + 1) ^ 2))
      atTop (ùìù <| sin (œÄ * z)) := by
  exact tendsto_euler_sin_prod _

/- I think this should be a Complex lemma -/
theorem Complex.abs_nonpos_iff {z : ‚ÑÇ} : abs z ‚â§ 0 ‚Üî z = 0 :=
  norm_le_zero_iff (a := z)

/- This won't work since log's arg might wrap around -/
/- theorem Complex.log_prod {Œ± : Type*} (s : Finset Œ±) (f : Œ± ‚Üí ‚ÑÇ) (hf : ‚àÄ x ‚àà s, f x ‚â† 0) : -/
/-     log (‚àè i ‚àà s, f i) = ‚àë i ‚àà s, log (f i) := by -/

local notation "f" => fun z ‚Ü¶ œÄ * cot (œÄ * z)
local notation "g" z => fun n : ‚Ñ§ ‚Ü¶ 1 / z + ‚àë i ‚àà range n, (1 / (z - (i + 1)) + 1 / (z + (i + 1)))

-- https://math.stackexchange.com/a/581206/948125
-- Note: We only need when z ‚àà ‚Ñç
theorem aux (z : ‚ÑÇ) (hz : ‚àÄ n : ‚Ñ§, z ‚â† n) : sin (œÄ * z) ‚â† 0 := by
  apply sin_eq_zero_iff.not.mpr
  push_neg
  intro m
  contrapose! hz
  rw [mul_right_cancel‚ÇÄ (by norm_cast; exact Real.pi_ne_zero) ((mul_comm z _).trans hz)]
  use m

theorem g_hasSum (z : ‚ÑÇ) (hz : 0 < z.im) :
    Summable (fun i : ‚Ñï ‚Ü¶ 1 / (z - (i + 1)) + 1 / (z + (i + 1))) := by
  simp_rw [div_add_div]

theorem pt1_f (z : ‚ÑÇ) (hz : ‚àÄ n : ‚Ñ§, z ‚â† n) : ContinuousAt f z :=
  ((continuous_cos.continuousAt.div continuous_sin.continuousAt $ aux _ hz).comp
    <| continuousAt_id.const_mul _).const_mul _


theorem final (z : ‚ÑÇ) (hz : ‚àÄ n : ‚Ñ§, z ‚â† n) : Tendsto (g z) atTop (ùìù <|f z) := by
  done
